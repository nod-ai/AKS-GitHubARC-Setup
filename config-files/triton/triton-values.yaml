githubConfigSecret: "triton-secret"
githubConfigUrl: "https://github.com/triton-lang"
runnerGroup: "mi300x-runner-set"
controllerServiceAccount:
  name: arc-gha-rs-controller
  namespace: arc-systems

## maxRunners is the max number of runners the auto scaling runner set will scale up to.
maxRunners: 3

## minRunners is the min number of idle runners. The target number of runners created will be
## calculated as a sum of minRunners and the number of jobs assigned to the scale set.
minRunners: 1

template:
  spec:
    securityContext:
      supplementalGroups:
        - 110
    initContainers:
      - name: init-dind-externals
        image: ghcr.io/saienduri/ghascale-rocm-dev:main
        imagePullPolicy: Always
        command:
          ["cp", "-r", "/home/runner/externals/.", "/home/runner/tmpDir/"]
        volumeMounts:
          - name: dind-externals
            mountPath: /home/runner/tmpDir
    containers:
      - name: runner
        image: ghcr.io/saienduri/ghascale-rocm-dev:main
        imagePullPolicy: Always
        command:
          - /bin/sh
          - -c
          - |
            devices=$(ls -la /dev/dri/ | grep renderD | awk '{print $10}')
            GHA_RENDER_DEVICES="--group-add 110"
            for device in $devices; do
              GHA_RENDER_DEVICES="${GHA_RENDER_DEVICES} --device /dev/dri/${device}"
            done
            echo "${GHA_RENDER_DEVICES}" > /etc/podinfo/gha-render-devices
            # Wait for Docker to be ready before starting runner
            echo "Waiting for docker..."
            until docker info >/dev/null 2>&1; do sleep 5; done
            docker login -u rocmshared <docker_token>
            echo <docker_token>| docker login -u rocmshared --password-stdin
            /home/runner/run.sh
        resources:
          requests:
            amd.com/gpu: 1
          limits:
            amd.com/gpu: 1
        env:
          - name: DOCKER_HOST
            value: unix:///var/run/docker.sock
        volumeMounts:
          - name: work
            mountPath: /home/runner/_work
          - name: dind-sock
            mountPath: /var/run
      - name: dind
        image: docker:dind
        args:
          - dockerd
          - --host=unix:///var/run/docker.sock
          - --group=$(DOCKER_GROUP_GID)
        env:
          - name: DOCKER_GROUP_GID
            value: "123"
        securityContext:
          privileged: true
        volumeMounts:
          - name: work
            mountPath: /home/runner/_work
          - name: dind-sock
            mountPath: /var/run
          - name: dind-externals
            mountPath: /home/runner/externals
    volumes:
      - name: work
        emptyDir: {}
      - name: dind-sock
        emptyDir: {}
      - name: dind-externals
        emptyDir: {}